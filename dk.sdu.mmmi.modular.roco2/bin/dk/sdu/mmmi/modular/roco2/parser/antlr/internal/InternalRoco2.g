/*
* generated by Xtext
*/
grammar InternalRoco2;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package dk.sdu.mmmi.modular.roco2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.sdu.mmmi.modular.roco2.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.sdu.mmmi.modular.roco2.services.Roco2GrammarAccess;

}

@parser::members {

 	private Roco2GrammarAccess grammarAccess;
 	
    public InternalRoco2Parser(TokenStream input, Roco2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected Roco2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getPackageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProgramRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getSemicolonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getExternalsExternalNameParserRuleCall_3_0()); 
	    }
		lv_externals_3_0=ruleExternalName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"externals",
        		lv_externals_3_0, 
        		"ExternalName");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getElementsLocalTypeParserRuleCall_4_0()); 
	    }
		lv_elements_4_0=ruleLocalType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"LocalType");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleExternalName
entryRuleExternalName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalNameRule()); }
	 iv_ruleExternalName=ruleExternalName 
	 { $current=$iv_ruleExternalName.current; } 
	 EOF 
;

// Rule ExternalName
ruleExternalName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='external' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExternalNameAccess().getExternalKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExternalNameAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExternalNameAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleLocalType
entryRuleLocalType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalTypeRule()); }
	 iv_ruleLocalType=ruleLocalType 
	 { $current=$iv_ruleLocalType.current; } 
	 EOF 
;

// Rule LocalType
ruleLocalType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLocalTypeAccess().getTypeDefParserRuleCall_0()); 
    }
    this_TypeDef_0=ruleTypeDef
    { 
        $current = $this_TypeDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLocalTypeAccess().getScopeDefiningElementParserRuleCall_1()); 
    }
    this_ScopeDefiningElement_1=ruleScopeDefiningElement
    { 
        $current = $this_ScopeDefiningElement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleScopeDefiningElement
entryRuleScopeDefiningElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopeDefiningElementRule()); }
	 iv_ruleScopeDefiningElement=ruleScopeDefiningElement 
	 { $current=$iv_ruleScopeDefiningElement.current; } 
	 EOF 
;

// Rule ScopeDefiningElement
ruleScopeDefiningElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getScopeDefiningElementAccess().getEnumDefParserRuleCall_0()); 
    }
    this_EnumDef_0=ruleEnumDef
    { 
        $current = $this_EnumDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScopeDefiningElementAccess().getEnsembleParserRuleCall_1()); 
    }
    this_Ensemble_1=ruleEnsemble
    { 
        $current = $this_Ensemble_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getScopeDefiningElementAccess().getRoleParserRuleCall_2()); 
    }
    this_Role_2=ruleRole
    { 
        $current = $this_Role_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDefAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDefAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleEnumDef
entryRuleEnumDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDefRule()); }
	 iv_ruleEnumDef=ruleEnumDef 
	 { $current=$iv_ruleEnumDef.current; } 
	 EOF 
;

// Rule EnumDef
ruleEnumDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumDefAccess().getEnumKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumDefAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumDefAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		lv_names_3_0=RULE_ID
		{
			newLeafNode(lv_names_3_0, grammarAccess.getEnumDefAccess().getNamesIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumDefRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumDefAccess().getCommaKeyword_4_0());
    }
(
(
		lv_names_5_0=RULE_ID
		{
			newLeafNode(lv_names_5_0, grammarAccess.getEnumDefAccess().getNamesIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumDefRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_5_0, 
        		"ID");
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumDefAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEnsemble
entryRuleEnsemble returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnsembleRule()); }
	 iv_ruleEnsemble=ruleEnsemble 
	 { $current=$iv_ruleEnsemble.current; } 
	 EOF 
;

// Rule Ensemble
ruleEnsemble returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ensemble' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnsembleAccess().getEnsembleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnsembleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnsembleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnsembleAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnsembleRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getEnsembleAccess().getExtendsEnsembleEnsembleCrossReference_2_1_0()); 
	}

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnsembleAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnsembleAccess().getElementsMemberParserRuleCall_4_0()); 
	    }
		lv_elements_5_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnsembleRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnsembleAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_abstract_0_0=	'abstract' 
    {
        newLeafNode(lv_abstract_0_0, grammarAccess.getRoleAccess().getAbstractAbstractKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleRule());
	        }
       		setWithLastConsumed($current, "abstract", true, "abstract");
	    }

)
)?(
(
		lv_mixin_1_0=	'mixin' 
    {
        newLeafNode(lv_mixin_1_0, grammarAccess.getRoleAccess().getMixinMixinKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleRule());
	        }
       		setWithLastConsumed($current, "mixin", true, "mixin");
	    }

)
)?	otherlv_2='role' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRoleAccess().getRoleKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getRoleAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRoleAccess().getExtendsKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getRoleAccess().getExtendsRoleRoleCrossReference_4_1_0()); 
	}

)
))?(	otherlv_6='within' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRoleAccess().getWithinKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getRoleAccess().getWithinEnsembleEnsembleCrossReference_5_1_0()); 
	}

)
))?	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRoleAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRoleAccess().getElementsMemberParserRuleCall_7_0()); 
	    }
		lv_elements_9_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRoleRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_9_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRoleAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getFieldParserRuleCall_0()); 
    }
    this_Field_0=ruleField
    { 
        $current = $this_Field_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getRequireParserRuleCall_1()); 
    }
    this_Require_1=ruleRequire
    { 
        $current = $this_Require_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getBehaviorParserRuleCall_2()); 
    }
    this_Behavior_2=ruleBehavior
    { 
        $current = $this_Behavior_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getMethodParserRuleCall_3()); 
    }
    this_Method_3=ruleMethod
    { 
        $current = $this_Method_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getUpdateParserRuleCall_4()); 
    }
    this_Update_4=ruleUpdate
    { 
        $current = $this_Update_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getConstantDefinitionParserRuleCall_5()); 
    }
    this_ConstantDefinition_5=ruleConstantDefinition
    { 
        $current = $this_ConstantDefinition_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberAccess().getConstantAssignmentParserRuleCall_6()); 
    }
    this_ConstantAssignment_6=ruleConstantAssignment
    { 
        $current = $this_ConstantAssignment_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldAccess().getTypeLocalTypeCrossReference_0_0()); 
	}

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getInitialExprParserRuleCall_2_1_0()); 
	    }
		lv_initial_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFieldAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleRequire
entryRuleRequire returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequireRule()); }
	 iv_ruleRequire=ruleRequire 
	 { $current=$iv_ruleRequire.current; } 
	 EOF 
;

// Rule Require
ruleRequire returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='require' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRequireAccess().getRequireKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequireAccess().getExpExprParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequireRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRequireAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleBehavior
entryRuleBehavior returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviorRule()); }
	 iv_ruleBehavior=ruleBehavior 
	 { $current=$iv_ruleBehavior.current; } 
	 EOF 
;

// Rule Behavior
ruleBehavior returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='behavior' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBehaviorAccess().getBehaviorKeyword_0());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getBehaviorAccess().getQualifierScopeDefiningElementCrossReference_1_0_0()); 
	}

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBehaviorAccess().getFullStopKeyword_1_1());
    }
)?(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getBehaviorAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBehaviorAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAccess().getParamsParameterParserRuleCall_4_0_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBehaviorAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAccess().getParamsParameterParserRuleCall_4_1_1_0()); 
	    }
		lv_params_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBehaviorAccess().getRightParenthesisKeyword_5());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getBehaviorAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAccess().getBodyStatementParserRuleCall_7_0()); 
	    }
		lv_body_10_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_10_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getBehaviorAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getTypeLocalTypeCrossReference_0_0()); 
	}

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getMethodAccess().getTypeLocalTypeCrossReference_0_0()); 
	}

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getBodyStatementParserRuleCall_6_0()); 
	    }
		lv_body_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprAccess().getBinaryExprParserRuleCall_0()); 
    }
    this_BinaryExpr_0=ruleBinaryExpr
    { 
        $current = $this_BinaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprAccess().getValueParserRuleCall_1()); 
    }
    this_Value_1=ruleValue
    { 
        $current = $this_Value_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprAccess().getFunctionCallParserRuleCall_2()); 
    }
    this_FunctionCall_2=ruleFunctionCall
    { 
        $current = $this_FunctionCall_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprAccess().getInternalQualifiedNameParserRuleCall_3()); 
    }
    this_InternalQualifiedName_3=ruleInternalQualifiedName
    { 
        $current = $this_InternalQualifiedName_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprAccess().getLocalVariableParserRuleCall_4()); 
    }
    this_LocalVariable_4=ruleLocalVariable
    { 
        $current = $this_LocalVariable_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLocalVariable
entryRuleLocalVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableRule()); }
	 iv_ruleLocalVariable=ruleLocalVariable 
	 { $current=$iv_ruleLocalVariable.current; } 
	 EOF 
;

// Rule LocalVariable
ruleLocalVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLocalVariableAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleInternalQualifiedName
entryRuleInternalQualifiedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInternalQualifiedNameRule()); }
	 iv_ruleInternalQualifiedName=ruleInternalQualifiedName 
	 { $current=$iv_ruleInternalQualifiedName.current; } 
	 EOF 
;

// Rule InternalQualifiedName
ruleInternalQualifiedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInternalQualifiedNameRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getInternalQualifiedNameAccess().getQualifierScopeDefiningElementCrossReference_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInternalQualifiedNameAccess().getFullStopKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInternalQualifiedNameAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInternalQualifiedNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleBinaryExpr
entryRuleBinaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryExprRule()); }
	 iv_ruleBinaryExpr=ruleBinaryExpr 
	 { $current=$iv_ruleBinaryExpr.current; } 
	 EOF 
;

// Rule BinaryExpr
ruleBinaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryExprAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExprAccess().getLhsExprParserRuleCall_1_0()); 
	    }
		lv_lhs_1_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExprRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExprAccess().getOpBinaryOperatorParserRuleCall_2_0()); 
	    }
		lv_op_2_0=ruleBinaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BinaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExprAccess().getRhsExprParserRuleCall_3_0()); 
	    }
		lv_rhs_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExprRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBinaryExprAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleBinaryOperator
entryRuleBinaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperatorRule()); } 
	 iv_ruleBinaryOperator=ruleBinaryOperator 
	 { $current=$iv_ruleBinaryOperator.current.getText(); }  
	 EOF 
;

// Rule BinaryOperator
ruleBinaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getAmpersandAmpersandKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getPlusSignKeyword_2()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getHyphenMinusKeyword_3()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getAsteriskKeyword_4()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getSolidusKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsExprParserRuleCall_2_0_0()); 
	    }
		lv_arguments_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsExprParserRuleCall_2_1_1_0()); 
	    }
		lv_arguments_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBasicStatementParserRuleCall_0()); 
    }
    this_BasicStatement_0=ruleBasicStatement
    { 
        $current = $this_BasicStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getQualifiedStatementParserRuleCall_1()); 
    }
    this_QualifiedStatement_1=ruleQualifiedStatement
    { 
        $current = $this_QualifiedStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicStatement
entryRuleBasicStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicStatementRule()); }
	 iv_ruleBasicStatement=ruleBasicStatement 
	 { $current=$iv_ruleBasicStatement.current; } 
	 EOF 
;

// Rule BasicStatement
ruleBasicStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicStatementAccess().getConditionalParserRuleCall_0()); 
    }
    this_Conditional_0=ruleConditional
    { 
        $current = $this_Conditional_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicStatementAccess().getOperationParserRuleCall_1()); 
    }
    this_Operation_1=ruleOperation
    { 
        $current = $this_Operation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicStatementAccess().getAssignmentParserRuleCall_2()); 
    }
    this_Assignment_2=ruleAssignment
    { 
        $current = $this_Assignment_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicStatementAccess().getForLoopParserRuleCall_3()); 
    }
    this_ForLoop_3=ruleForLoop
    { 
        $current = $this_ForLoop_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	 iv_ruleForLoop=ruleForLoop 
	 { $current=$iv_ruleForLoop.current; } 
	 EOF 
;

// Rule ForLoop
ruleForLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_variable_2_0=RULE_ID
		{
			newLeafNode(lv_variable_2_0, grammarAccess.getForLoopAccess().getVariableIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForLoopRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForLoopAccess().getColonKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getForLoopRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getForLoopAccess().getQualifierScopeDefiningElementCrossReference_4_0()); 
	}

)
)	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForLoopAccess().getFullStopKeyword_5());
    }
(
(
		lv_shared_6_0=RULE_ID
		{
			newLeafNode(lv_shared_6_0, grammarAccess.getForLoopAccess().getSharedIDTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForLoopRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"shared",
        		lv_shared_6_0, 
        		"ID");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_7());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getBodyStatementParserRuleCall_9_0()); 
	    }
		lv_body_9_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_9_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleConditional
entryRuleConditional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	 iv_ruleConditional=ruleConditional 
	 { $current=$iv_ruleConditional.current; } 
	 EOF 
;

// Rule Conditional
ruleConditional returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionalAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getConditionExprParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditionalAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getThenBranchStatementParserRuleCall_5_0()); 
	    }
		lv_thenBranch_5_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		add(
       			$current, 
       			"thenBranch",
        		lv_thenBranch_5_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_6());
    }
(	otherlv_7='else' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConditionalAccess().getElseKeyword_7_0());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getElseBranchStatementParserRuleCall_7_2_0()); 
	    }
		lv_elseBranch_9_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		add(
       			$current, 
       			"elseBranch",
        		lv_elseBranch_9_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_7_3());
    }
)?)
;





// Entry rule entryRuleQualifiedStatement
entryRuleQualifiedStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedStatementRule()); }
	 iv_ruleQualifiedStatement=ruleQualifiedStatement 
	 { $current=$iv_ruleQualifiedStatement.current; } 
	 EOF 
;

// Rule QualifiedStatement
ruleQualifiedStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_self_0_0=	'self' 
    {
        newLeafNode(lv_self_0_0, grammarAccess.getQualifiedStatementAccess().getSelfSelfKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedStatementRule());
	        }
       		setWithLastConsumed($current, "self", true, "self");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedStatementRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getQualifiedStatementAccess().getQualifierScopeDefiningElementCrossReference_0_1_0()); 
	}

)
))(
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedStatementAccess().getStatementOperationActivationParserRuleCall_1_0_0()); 
	    }
		lv_statement_2_1=ruleOperationActivation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_1, 
        		"OperationActivation");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getQualifiedStatementAccess().getStatementOperationInhibitParserRuleCall_1_0_1()); 
	    }
		lv_statement_2_2=ruleOperationInhibit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_2, 
        		"OperationInhibit");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getQualifiedStatementAccess().getStatementModuleConditionalParserRuleCall_1_0_2()); 
	    }
		lv_statement_2_3=ruleModuleConditional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_2_3, 
        		"ModuleConditional");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleOperationActivation
entryRuleOperationActivation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationActivationRule()); }
	 iv_ruleOperationActivation=ruleOperationActivation 
	 { $current=$iv_ruleOperationActivation.current; } 
	 EOF 
;

// Rule OperationActivation
ruleOperationActivation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationActivationAccess().getFullStopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationActivationAccess().getOperationOperationParserRuleCall_1_0()); 
	    }
		lv_operation_1_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationActivationRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_1_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperationInhibit
entryRuleOperationInhibit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationInhibitRule()); }
	 iv_ruleOperationInhibit=ruleOperationInhibit 
	 { $current=$iv_ruleOperationInhibit.current; } 
	 EOF 
;

// Rule OperationInhibit
ruleOperationInhibit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationInhibitAccess().getExclamationMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationInhibitAccess().getOperationOperationParserRuleCall_1_0()); 
	    }
		lv_operation_1_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationInhibitRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_1_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModuleConditional
entryRuleModuleConditional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleConditionalRule()); }
	 iv_ruleModuleConditional=ruleModuleConditional 
	 { $current=$iv_ruleModuleConditional.current; } 
	 EOF 
;

// Rule ModuleConditional
ruleModuleConditional returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleConditionalAccess().getFullStopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleConditionalAccess().getConditionalConditionalParserRuleCall_1_0()); 
	    }
		lv_conditional_1_0=ruleConditional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleConditionalRule());
	        }
       		set(
       			$current, 
       			"conditional",
        		lv_conditional_1_0, 
        		"Conditional");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getArgumentsExprParserRuleCall_2_0_0()); 
	    }
		lv_arguments_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getArgumentsExprParserRuleCall_2_1_1_0()); 
	    }
		lv_arguments_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOperationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExpExprParserRuleCall_2_0()); 
	    }
		lv_exp_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getValueAccess().getValueINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
    |(	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValueAccess().getCommercialAtKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getValueAccess().getExternExternalNameCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleUpdate
entryRuleUpdate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateRule()); }
	 iv_ruleUpdate=ruleUpdate 
	 { $current=$iv_ruleUpdate.current; } 
	 EOF 
;

// Rule Update
ruleUpdate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUpdateAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdateAccess().getFullStopKeyword_1());
    }
	otherlv_2='update' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateAccess().getUpdateKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUpdateAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateAccess().getBodyStatementParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateAccess().getBodyStatementParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getUpdateAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	 iv_ruleConstantDefinition=ruleConstantDefinition 
	 { $current=$iv_ruleConstantDefinition.current; } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_abstract_0_0=	'abstract' 
    {
        newLeafNode(lv_abstract_0_0, grammarAccess.getConstantDefinitionAccess().getAbstractAbstractKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
       		setWithLastConsumed($current, "abstract", true, "abstract");
	    }

)
)?	otherlv_1='constant' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantDefinitionAccess().getConstantKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getConstantDefinitionAccess().getTypeLocalTypeCrossReference_2_0()); 
	}

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getConstantDefinitionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantDefinitionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleConstantAssignment
entryRuleConstantAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantAssignmentRule()); }
	 iv_ruleConstantAssignment=ruleConstantAssignment 
	 { $current=$iv_ruleConstantAssignment.current; } 
	 EOF 
;

// Rule ConstantAssignment
ruleConstantAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_lhs_0_0=RULE_ID
		{
			newLeafNode(lv_lhs_0_0, grammarAccess.getConstantAssignmentAccess().getLhsIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAssignmentAccess().getRhsExprParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantAssignmentRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantAssignmentAccess().getSemicolonKeyword_3());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


