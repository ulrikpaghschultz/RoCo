/*
* generated by Xtext
*/

package dk.sdu.mmmi.modular.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RobustCollaborationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsProgramElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		
		//Program:
		//	"package" name=ID ";" elements+=ProgramElement*;
		public ParserRule getRule() { return rule; }

		//"package" name=ID ";" elements+=ProgramElement*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//elements+=ProgramElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//ProgramElement
		public RuleCall getElementsProgramElementParserRuleCall_3_0() { return cElementsProgramElementParserRuleCall_3_0; }
	}

	public class ProgramElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProgramElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProgramElement:
		//	LocalType | ExternalName;
		public ParserRule getRule() { return rule; }

		//LocalType | ExternalName
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalType
		public RuleCall getLocalTypeParserRuleCall_0() { return cLocalTypeParserRuleCall_0; }

		//ExternalName
		public RuleCall getExternalNameParserRuleCall_1() { return cExternalNameParserRuleCall_1; }
	}

	public class ExternalNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExternalName:
		//	"external" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"external" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ScopeDefiningElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScopeDefiningElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnsembleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRoleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ScopeDefiningElement:
		//	EnumDef | Ensemble | Role;
		public ParserRule getRule() { return rule; }

		//EnumDef | Ensemble | Role
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumDef
		public RuleCall getEnumDefParserRuleCall_0() { return cEnumDefParserRuleCall_0; }

		//Ensemble
		public RuleCall getEnsembleParserRuleCall_1() { return cEnsembleParserRuleCall_1; }

		//Role
		public RuleCall getRoleParserRuleCall_2() { return cRoleParserRuleCall_2; }
	}

	public class LocalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScopeDefiningElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LocalType:
		//	TypeDef | ScopeDefiningElement;
		public ParserRule getRule() { return rule; }

		//TypeDef | ScopeDefiningElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_0() { return cTypeDefParserRuleCall_0; }

		//ScopeDefiningElement
		public RuleCall getScopeDefiningElementParserRuleCall_1() { return cScopeDefiningElementParserRuleCall_1; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TypeDef:
		//	"type" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"type" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class EnumDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamesIDTerminalRuleCall_3_0 = (RuleCall)cNamesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNamesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_4_1_0 = (RuleCall)cNamesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EnumDef:
		//	"enum" name=ID "{" names+=ID ("," names+=ID)* "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" names+=ID ("," names+=ID)* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//names+=ID
		public Assignment getNamesAssignment_3() { return cNamesAssignment_3; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_3_0() { return cNamesIDTerminalRuleCall_3_0; }

		//("," names+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//names+=ID
		public Assignment getNamesAssignment_4_1() { return cNamesAssignment_4_1; }

		//ID
		public RuleCall getNamesIDTerminalRuleCall_4_1_0() { return cNamesIDTerminalRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EnsembleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ensemble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnsembleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsMemberParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Ensemble:
		//	"ensemble" name=ID "{" elements+=Member* "}";
		public ParserRule getRule() { return rule; }

		//"ensemble" name=ID "{" elements+=Member* "}"
		public Group getGroup() { return cGroup; }

		//"ensemble"
		public Keyword getEnsembleKeyword_0() { return cEnsembleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=Member*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//Member
		public RuleCall getElementsMemberParserRuleCall_3_0() { return cElementsMemberParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cRoleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsRoleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendsRoleIDTerminalRuleCall_3_1_0 = (RuleCall)cExtendsRoleAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithinKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWithinEnsembleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWithinEnsembleIDTerminalRuleCall_4_1_0 = (RuleCall)cWithinEnsembleAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsMemberParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Role:
		//	abstract?="abstract"? "role" name=ID ("extends" extendsRole?=ID)? ("within" withinEnsemble?=ID)? "{" elements+=Member*
		//	"}";
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? "role" name=ID ("extends" extendsRole?=ID)? ("within" withinEnsemble?=ID)? "{" elements+=Member*
		//"}"
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"role"
		public Keyword getRoleKeyword_1() { return cRoleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" extendsRole?=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extendsRole?=ID
		public Assignment getExtendsRoleAssignment_3_1() { return cExtendsRoleAssignment_3_1; }

		//ID
		public RuleCall getExtendsRoleIDTerminalRuleCall_3_1_0() { return cExtendsRoleIDTerminalRuleCall_3_1_0; }

		//("within" withinEnsemble?=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"within"
		public Keyword getWithinKeyword_4_0() { return cWithinKeyword_4_0; }

		//withinEnsemble?=ID
		public Assignment getWithinEnsembleAssignment_4_1() { return cWithinEnsembleAssignment_4_1; }

		//ID
		public RuleCall getWithinEnsembleIDTerminalRuleCall_4_1_0() { return cWithinEnsembleIDTerminalRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//elements+=Member*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//Member
		public RuleCall getElementsMemberParserRuleCall_6_0() { return cElementsMemberParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequireParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBehaviorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMethodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUpdateParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstantDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstantAssignmentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Member:
		//	Field | Require | Behavior | Method | Update | ConstantDefinition | ConstantAssignment;
		public ParserRule getRule() { return rule; }

		//Field | Require | Behavior | Method | Update | ConstantDefinition | ConstantAssignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }

		//Require
		public RuleCall getRequireParserRuleCall_1() { return cRequireParserRuleCall_1; }

		//Behavior
		public RuleCall getBehaviorParserRuleCall_2() { return cBehaviorParserRuleCall_2; }

		//Method
		public RuleCall getMethodParserRuleCall_3() { return cMethodParserRuleCall_3; }

		//Update
		public RuleCall getUpdateParserRuleCall_4() { return cUpdateParserRuleCall_4; }

		//ConstantDefinition
		public RuleCall getConstantDefinitionParserRuleCall_5() { return cConstantDefinitionParserRuleCall_5; }

		//ConstantAssignment
		public RuleCall getConstantAssignmentParserRuleCall_6() { return cConstantAssignmentParserRuleCall_6; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSharedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSharedSharedKeyword_0_0 = (Keyword)cSharedAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeLocalTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeLocalTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeLocalTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialExprParserRuleCall_3_1_0 = (RuleCall)cInitialAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Field:
		//	shared?="shared"? type=[LocalType] name=ID ("=" initial=Expr)? ";";
		public ParserRule getRule() { return rule; }

		//shared?="shared"? type=[LocalType] name=ID ("=" initial=Expr)? ";"
		public Group getGroup() { return cGroup; }

		//shared?="shared"?
		public Assignment getSharedAssignment_0() { return cSharedAssignment_0; }

		//"shared"
		public Keyword getSharedSharedKeyword_0_0() { return cSharedSharedKeyword_0_0; }

		//type=[LocalType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[LocalType]
		public CrossReference getTypeLocalTypeCrossReference_1_0() { return cTypeLocalTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeLocalTypeIDTerminalRuleCall_1_0_1() { return cTypeLocalTypeIDTerminalRuleCall_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("=" initial=Expr)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//initial=Expr
		public Assignment getInitialAssignment_3_1() { return cInitialAssignment_3_1; }

		//Expr
		public RuleCall getInitialExprParserRuleCall_3_1_0() { return cInitialExprParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RequireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Require");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExprParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Require:
		//	"require" exp=Expr ";";
		public ParserRule getRule() { return rule; }

		//"require" exp=Expr ";"
		public Group getGroup() { return cGroup; }

		//"require"
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }

		//exp=Expr
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//Expr
		public RuleCall getExpExprParserRuleCall_1_0() { return cExpExprParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQualifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cQualifierScopeDefiningElementCrossReference_1_0_0 = (CrossReference)cQualifierAssignment_1_0.eContents().get(0);
		private final RuleCall cQualifierScopeDefiningElementIDTerminalRuleCall_1_0_0_1 = (RuleCall)cQualifierScopeDefiningElementCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyStatementParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Behavior:
		//	"behavior" (qualifier=[ScopeDefiningElement] ".")? name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
		//	body+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//"behavior" (qualifier=[ScopeDefiningElement] ".")? name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
		//body+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"behavior"
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }

		//(qualifier=[ScopeDefiningElement] ".")?
		public Group getGroup_1() { return cGroup_1; }

		//qualifier=[ScopeDefiningElement]
		public Assignment getQualifierAssignment_1_0() { return cQualifierAssignment_1_0; }

		//[ScopeDefiningElement]
		public CrossReference getQualifierScopeDefiningElementCrossReference_1_0_0() { return cQualifierScopeDefiningElementCrossReference_1_0_0; }

		//ID
		public RuleCall getQualifierScopeDefiningElementIDTerminalRuleCall_1_0_0_1() { return cQualifierScopeDefiningElementIDTerminalRuleCall_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//body+=Statement*
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_7_0() { return cBodyStatementParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeLocalTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeLocalTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeLocalTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=[LocalType] name=ID;
		public ParserRule getRule() { return rule; }

		//type=[LocalType] name=ID
		public Group getGroup() { return cGroup; }

		//type=[LocalType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[LocalType]
		public CrossReference getTypeLocalTypeCrossReference_0_0() { return cTypeLocalTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypeLocalTypeIDTerminalRuleCall_0_0_1() { return cTypeLocalTypeIDTerminalRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeLocalTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeLocalTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeLocalTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyStatementParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Method:
		//	type=[LocalType] name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//type=[LocalType] name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//type=[LocalType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[LocalType]
		public CrossReference getTypeLocalTypeCrossReference_0_0() { return cTypeLocalTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypeLocalTypeIDTerminalRuleCall_0_0_1() { return cTypeLocalTypeIDTerminalRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0_0() { return cParamsParameterParserRuleCall_3_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//body+=Statement*
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_6_0() { return cBodyStatementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQualifiedNameParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLocalVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expr:
		//	BinaryExpr | Value | FunctionCall | QualifiedName | LocalVariable;
		public ParserRule getRule() { return rule; }

		//BinaryExpr | Value | FunctionCall | QualifiedName | LocalVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryExpr
		public RuleCall getBinaryExprParserRuleCall_0() { return cBinaryExprParserRuleCall_0; }

		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_2() { return cFunctionCallParserRuleCall_2; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_3() { return cQualifiedNameParserRuleCall_3; }

		//LocalVariable
		public RuleCall getLocalVariableParserRuleCall_4() { return cLocalVariableParserRuleCall_4; }
	}

	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//LocalVariable:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cQualifierScopeDefiningElementCrossReference_0_0 = (CrossReference)cQualifierAssignment_0.eContents().get(0);
		private final RuleCall cQualifierScopeDefiningElementIDTerminalRuleCall_0_0_1 = (RuleCall)cQualifierScopeDefiningElementCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//QualifiedName:
		//	qualifier=[ScopeDefiningElement] "." name=ID;
		public ParserRule getRule() { return rule; }

		//qualifier=[ScopeDefiningElement] "." name=ID
		public Group getGroup() { return cGroup; }

		//qualifier=[ScopeDefiningElement]
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }

		//[ScopeDefiningElement]
		public CrossReference getQualifierScopeDefiningElementCrossReference_0_0() { return cQualifierScopeDefiningElementCrossReference_0_0; }

		//ID
		public RuleCall getQualifierScopeDefiningElementIDTerminalRuleCall_0_0_1() { return cQualifierScopeDefiningElementIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class BinaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhsExprParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpBinaryOperatorParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Assignment cRhsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRhsExprParserRuleCall_3_0 = (RuleCall)cRhsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BinaryExpr:
		//	"(" lhs=Expr op=BinaryOperator rhs=Expr ")";
		public ParserRule getRule() { return rule; }

		//"(" lhs=Expr op=BinaryOperator rhs=Expr ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//lhs=Expr
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//Expr
		public RuleCall getLhsExprParserRuleCall_1_0() { return cLhsExprParserRuleCall_1_0; }

		//op=BinaryOperator
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//BinaryOperator
		public RuleCall getOpBinaryOperatorParserRuleCall_2_0() { return cOpBinaryOperatorParserRuleCall_2_0; }

		//rhs=Expr
		public Assignment getRhsAssignment_3() { return cRhsAssignment_3; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_3_0() { return cRhsExprParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BinaryOperator:
		//	"==" | "&&";
		public ParserRule getRule() { return rule; }

		//"==" | "&&"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExprParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExprParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=Expr ("," arguments+=Expr)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=Expr
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//Expr
		public RuleCall getArgumentsExprParserRuleCall_2_0_0() { return cArgumentsExprParserRuleCall_2_0_0; }

		//("," arguments+=Expr)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arguments+=Expr
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//Expr
		public RuleCall getArgumentsExprParserRuleCall_2_1_1_0() { return cArgumentsExprParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelfOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//	Conditional | Operation | SelfOperation | Assignment;
		public ParserRule getRule() { return rule; }

		//Conditional | Operation | SelfOperation | Assignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_0() { return cConditionalParserRuleCall_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }

		//SelfOperation
		public RuleCall getSelfOperationParserRuleCall_2() { return cSelfOperationParserRuleCall_2; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_3() { return cAssignmentParserRuleCall_3; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExprParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenBranchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenBranchStatementParserRuleCall_5_0 = (RuleCall)cThenBranchAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElseBranchAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cElseBranchStatementParserRuleCall_7_2_0 = (RuleCall)cElseBranchAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Conditional:
		//	"if" "(" condition=Expr ")" "{" thenBranch+=Statement* "}" ("else" "{" elseBranch+=Statement* "}")?;
		public ParserRule getRule() { return rule; }

		//"if" "(" condition=Expr ")" "{" thenBranch+=Statement* "}" ("else" "{" elseBranch+=Statement* "}")?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expr
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expr
		public RuleCall getConditionExprParserRuleCall_2_0() { return cConditionExprParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//thenBranch+=Statement*
		public Assignment getThenBranchAssignment_5() { return cThenBranchAssignment_5; }

		//Statement
		public RuleCall getThenBranchStatementParserRuleCall_5_0() { return cThenBranchStatementParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//("else" "{" elseBranch+=Statement* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"else"
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//elseBranch+=Statement*
		public Assignment getElseBranchAssignment_7_2() { return cElseBranchAssignment_7_2; }

		//Statement
		public RuleCall getElseBranchStatementParserRuleCall_7_2_0() { return cElseBranchStatementParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cQualifierScopeDefiningElementCrossReference_0_0 = (CrossReference)cQualifierAssignment_0.eContents().get(0);
		private final RuleCall cQualifierScopeDefiningElementIDTerminalRuleCall_0_0_1 = (RuleCall)cQualifierScopeDefiningElementCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsExprParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsExprParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Operation:
		//	qualifier=[ScopeDefiningElement] "." name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")" ";";
		public ParserRule getRule() { return rule; }

		//qualifier=[ScopeDefiningElement] "." name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")" ";"
		public Group getGroup() { return cGroup; }

		//qualifier=[ScopeDefiningElement]
		public Assignment getQualifierAssignment_0() { return cQualifierAssignment_0; }

		//[ScopeDefiningElement]
		public CrossReference getQualifierScopeDefiningElementCrossReference_0_0() { return cQualifierScopeDefiningElementCrossReference_0_0; }

		//ID
		public RuleCall getQualifierScopeDefiningElementIDTerminalRuleCall_0_0_1() { return cQualifierScopeDefiningElementIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(arguments+=Expr ("," arguments+=Expr)*)?
		public Group getGroup_4() { return cGroup_4; }

		//arguments+=Expr
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }

		//Expr
		public RuleCall getArgumentsExprParserRuleCall_4_0_0() { return cArgumentsExprParserRuleCall_4_0_0; }

		//("," arguments+=Expr)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//arguments+=Expr
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }

		//Expr
		public RuleCall getArgumentsExprParserRuleCall_4_1_1_0() { return cArgumentsExprParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class SelfOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelfOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsExprParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsExprParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SelfOperation:
		//	"self" "." name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")" ";";
		public ParserRule getRule() { return rule; }

		//"self" "." name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")" ";"
		public Group getGroup() { return cGroup; }

		//"self"
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(arguments+=Expr ("," arguments+=Expr)*)?
		public Group getGroup_4() { return cGroup_4; }

		//arguments+=Expr
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }

		//Expr
		public RuleCall getArgumentsExprParserRuleCall_4_0_0() { return cArgumentsExprParserRuleCall_4_0_0; }

		//("," arguments+=Expr)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//arguments+=Expr
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }

		//Expr
		public RuleCall getArgumentsExprParserRuleCall_4_1_1_0() { return cArgumentsExprParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExprParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assignment:
		//	name=ID "=" exp=Expr ";";
		public ParserRule getRule() { return rule; }

		//name=ID "=" exp=Expr ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//exp=Expr
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//Expr
		public RuleCall getExpExprParserRuleCall_2_0() { return cExpExprParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExternAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cExternExternalNameCrossReference_1_1_0 = (CrossReference)cExternAssignment_1_1.eContents().get(0);
		private final RuleCall cExternExternalNameIDTerminalRuleCall_1_1_0_1 = (RuleCall)cExternExternalNameCrossReference_1_1_0.eContents().get(1);
		
		//Value:
		//	value=INT | "@" extern=[ExternalName];
		public ParserRule getRule() { return rule; }

		//value=INT | "@" extern=[ExternalName]
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//"@" extern=[ExternalName]
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//extern=[ExternalName]
		public Assignment getExternAssignment_1_1() { return cExternAssignment_1_1; }

		//[ExternalName]
		public CrossReference getExternExternalNameCrossReference_1_1_0() { return cExternExternalNameCrossReference_1_1_0; }

		//ID
		public RuleCall getExternExternalNameIDTerminalRuleCall_1_1_0_1() { return cExternExternalNameIDTerminalRuleCall_1_1_0_1; }
	}

	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSourceQualifierAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cSourceQualifierScopeDefiningElementCrossReference_1_3_0 = (CrossReference)cSourceQualifierAssignment_1_3.eContents().get(0);
		private final RuleCall cSourceQualifierScopeDefiningElementIDTerminalRuleCall_1_3_0_1 = (RuleCall)cSourceQualifierScopeDefiningElementCrossReference_1_3_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cSourceNameAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cSourceNameIDTerminalRuleCall_1_5_0 = (RuleCall)cSourceNameAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Update:
		//	"update" ("(" name=ID ":" sourceQualifier=[ScopeDefiningElement] "." sourceName=ID ")")? "{" body+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//"update" ("(" name=ID ":" sourceQualifier=[ScopeDefiningElement] "." sourceName=ID ")")? "{" body+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"update"
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }

		//("(" name=ID ":" sourceQualifier=[ScopeDefiningElement] "." sourceName=ID ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//sourceQualifier=[ScopeDefiningElement]
		public Assignment getSourceQualifierAssignment_1_3() { return cSourceQualifierAssignment_1_3; }

		//[ScopeDefiningElement]
		public CrossReference getSourceQualifierScopeDefiningElementCrossReference_1_3_0() { return cSourceQualifierScopeDefiningElementCrossReference_1_3_0; }

		//ID
		public RuleCall getSourceQualifierScopeDefiningElementIDTerminalRuleCall_1_3_0_1() { return cSourceQualifierScopeDefiningElementIDTerminalRuleCall_1_3_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_4() { return cFullStopKeyword_1_4; }

		//sourceName=ID
		public Assignment getSourceNameAssignment_1_5() { return cSourceNameAssignment_1_5; }

		//ID
		public RuleCall getSourceNameIDTerminalRuleCall_1_5_0() { return cSourceNameIDTerminalRuleCall_1_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//body+=Statement*
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_3_0() { return cBodyStatementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ConstantDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeLocalTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeLocalTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeLocalTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConstantDefinition:
		//	abstract?="abstract"? "constant" type=[LocalType] name=ID ";";
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? "constant" type=[LocalType] name=ID ";"
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"constant"
		public Keyword getConstantKeyword_1() { return cConstantKeyword_1; }

		//type=[LocalType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[LocalType]
		public CrossReference getTypeLocalTypeCrossReference_2_0() { return cTypeLocalTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeLocalTypeIDTerminalRuleCall_2_0_1() { return cTypeLocalTypeIDTerminalRuleCall_2_0_1; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ConstantAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsIDTerminalRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExprParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstantAssignment:
		//	lhs=ID "=" rhs=Expr ";";
		public ParserRule getRule() { return rule; }

		//lhs=ID "=" rhs=Expr ";"
		public Group getGroup() { return cGroup; }

		//lhs=ID
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//ID
		public RuleCall getLhsIDTerminalRuleCall_0_0() { return cLhsIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//rhs=Expr
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//Expr
		public RuleCall getRhsExprParserRuleCall_2_0() { return cRhsExprParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	private ProgramElements pProgram;
	private ProgramElementElements pProgramElement;
	private ExternalNameElements pExternalName;
	private ScopeDefiningElementElements pScopeDefiningElement;
	private LocalTypeElements pLocalType;
	private TypeDefElements pTypeDef;
	private EnumDefElements pEnumDef;
	private EnsembleElements pEnsemble;
	private RoleElements pRole;
	private MemberElements pMember;
	private FieldElements pField;
	private RequireElements pRequire;
	private BehaviorElements pBehavior;
	private ParameterElements pParameter;
	private MethodElements pMethod;
	private ExprElements pExpr;
	private LocalVariableElements pLocalVariable;
	private QualifiedNameElements pQualifiedName;
	private BinaryExprElements pBinaryExpr;
	private BinaryOperatorElements pBinaryOperator;
	private FunctionCallElements pFunctionCall;
	private StatementElements pStatement;
	private ConditionalElements pConditional;
	private OperationElements pOperation;
	private SelfOperationElements pSelfOperation;
	private AssignmentElements pAssignment;
	private ValueElements pValue;
	private UpdateElements pUpdate;
	private ConstantDefinitionElements pConstantDefinition;
	private ConstantAssignmentElements pConstantAssignment;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RobustCollaborationGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	"package" name=ID ";" elements+=ProgramElement*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//ProgramElement:
	//	LocalType | ExternalName;
	public ProgramElementElements getProgramElementAccess() {
		return (pProgramElement != null) ? pProgramElement : (pProgramElement = new ProgramElementElements());
	}
	
	public ParserRule getProgramElementRule() {
		return getProgramElementAccess().getRule();
	}

	//ExternalName:
	//	"external" name=ID ";";
	public ExternalNameElements getExternalNameAccess() {
		return (pExternalName != null) ? pExternalName : (pExternalName = new ExternalNameElements());
	}
	
	public ParserRule getExternalNameRule() {
		return getExternalNameAccess().getRule();
	}

	//ScopeDefiningElement:
	//	EnumDef | Ensemble | Role;
	public ScopeDefiningElementElements getScopeDefiningElementAccess() {
		return (pScopeDefiningElement != null) ? pScopeDefiningElement : (pScopeDefiningElement = new ScopeDefiningElementElements());
	}
	
	public ParserRule getScopeDefiningElementRule() {
		return getScopeDefiningElementAccess().getRule();
	}

	//LocalType:
	//	TypeDef | ScopeDefiningElement;
	public LocalTypeElements getLocalTypeAccess() {
		return (pLocalType != null) ? pLocalType : (pLocalType = new LocalTypeElements());
	}
	
	public ParserRule getLocalTypeRule() {
		return getLocalTypeAccess().getRule();
	}

	//TypeDef:
	//	"type" name=ID ";";
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//EnumDef:
	//	"enum" name=ID "{" names+=ID ("," names+=ID)* "}";
	public EnumDefElements getEnumDefAccess() {
		return (pEnumDef != null) ? pEnumDef : (pEnumDef = new EnumDefElements());
	}
	
	public ParserRule getEnumDefRule() {
		return getEnumDefAccess().getRule();
	}

	//Ensemble:
	//	"ensemble" name=ID "{" elements+=Member* "}";
	public EnsembleElements getEnsembleAccess() {
		return (pEnsemble != null) ? pEnsemble : (pEnsemble = new EnsembleElements());
	}
	
	public ParserRule getEnsembleRule() {
		return getEnsembleAccess().getRule();
	}

	//Role:
	//	abstract?="abstract"? "role" name=ID ("extends" extendsRole?=ID)? ("within" withinEnsemble?=ID)? "{" elements+=Member*
	//	"}";
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//Member:
	//	Field | Require | Behavior | Method | Update | ConstantDefinition | ConstantAssignment;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Field:
	//	shared?="shared"? type=[LocalType] name=ID ("=" initial=Expr)? ";";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Require:
	//	"require" exp=Expr ";";
	public RequireElements getRequireAccess() {
		return (pRequire != null) ? pRequire : (pRequire = new RequireElements());
	}
	
	public ParserRule getRequireRule() {
		return getRequireAccess().getRule();
	}

	//Behavior:
	//	"behavior" (qualifier=[ScopeDefiningElement] ".")? name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{"
	//	body+=Statement* "}";
	public BehaviorElements getBehaviorAccess() {
		return (pBehavior != null) ? pBehavior : (pBehavior = new BehaviorElements());
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//Parameter:
	//	type=[LocalType] name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Method:
	//	type=[LocalType] name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body+=Statement* "}";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Expr:
	//	BinaryExpr | Value | FunctionCall | QualifiedName | LocalVariable;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//LocalVariable:
	//	name=ID;
	public LocalVariableElements getLocalVariableAccess() {
		return (pLocalVariable != null) ? pLocalVariable : (pLocalVariable = new LocalVariableElements());
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}

	//QualifiedName:
	//	qualifier=[ScopeDefiningElement] "." name=ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//BinaryExpr:
	//	"(" lhs=Expr op=BinaryOperator rhs=Expr ")";
	public BinaryExprElements getBinaryExprAccess() {
		return (pBinaryExpr != null) ? pBinaryExpr : (pBinaryExpr = new BinaryExprElements());
	}
	
	public ParserRule getBinaryExprRule() {
		return getBinaryExprAccess().getRule();
	}

	//BinaryOperator:
	//	"==" | "&&";
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return (pBinaryOperator != null) ? pBinaryOperator : (pBinaryOperator = new BinaryOperatorElements());
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//FunctionCall:
	//	name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//Statement:
	//	Conditional | Operation | SelfOperation | Assignment;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Conditional:
	//	"if" "(" condition=Expr ")" "{" thenBranch+=Statement* "}" ("else" "{" elseBranch+=Statement* "}")?;
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Operation:
	//	qualifier=[ScopeDefiningElement] "." name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")" ";";
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//SelfOperation:
	//	"self" "." name=ID "(" (arguments+=Expr ("," arguments+=Expr)*)? ")" ";";
	public SelfOperationElements getSelfOperationAccess() {
		return (pSelfOperation != null) ? pSelfOperation : (pSelfOperation = new SelfOperationElements());
	}
	
	public ParserRule getSelfOperationRule() {
		return getSelfOperationAccess().getRule();
	}

	//Assignment:
	//	name=ID "=" exp=Expr ";";
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Value:
	//	value=INT | "@" extern=[ExternalName];
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Update:
	//	"update" ("(" name=ID ":" sourceQualifier=[ScopeDefiningElement] "." sourceName=ID ")")? "{" body+=Statement* "}";
	public UpdateElements getUpdateAccess() {
		return (pUpdate != null) ? pUpdate : (pUpdate = new UpdateElements());
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}

	//ConstantDefinition:
	//	abstract?="abstract"? "constant" type=[LocalType] name=ID ";";
	public ConstantDefinitionElements getConstantDefinitionAccess() {
		return (pConstantDefinition != null) ? pConstantDefinition : (pConstantDefinition = new ConstantDefinitionElements());
	}
	
	public ParserRule getConstantDefinitionRule() {
		return getConstantDefinitionAccess().getRule();
	}

	//ConstantAssignment:
	//	lhs=ID "=" rhs=Expr ";";
	public ConstantAssignmentElements getConstantAssignmentAccess() {
		return (pConstantAssignment != null) ? pConstantAssignment : (pConstantAssignment = new ConstantAssignmentElements());
	}
	
	public ParserRule getConstantAssignmentRule() {
		return getConstantAssignmentAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
