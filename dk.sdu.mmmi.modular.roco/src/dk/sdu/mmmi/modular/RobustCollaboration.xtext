grammar dk.sdu.mmmi.modular.RobustCollaboration with org.eclipse.xtext.common.Terminals

generate robustCollaboration "http://www.sdu.dk/mmmi/modular/RobustCollaboration"

Program:
	'package' name=ID ';'
	elements+=ProgramElement*;
	
ProgramElement:
	LocalType | ExternalName;

ExternalName:
	'external' name=ID ';'
;

ScopeDefiningElement:
	EnumDef | Ensemble | Role
;


LocalType:
	TypeDef | ScopeDefiningElement
;

TypeDef:
	'type' name=ID ';'
;

EnumDef:
	'enum' name=ID '{' names+=ID (',' names+=ID )* '}';

Ensemble:
	'ensemble' name=ID '{' elements+=Member* '}'
;

Role:
	(abstract?='abstract')? 'role' name=ID ('extends' extendsRole?=ID)? ('within' withinEnsemble?=ID)? '{'
		elements+=Member*
	'}'
;

Member:
	Field | Require | Behavior | Method | Update | ConstantDefinition | ConstantAssignment
;

Field:
	(shared?='shared')? type=[LocalType] name=ID ('=' initial=Expr)? ';'
;

Require:
	'require' exp=Expr ';'
;

Behavior:
	'behavior' (qualifier = [ScopeDefiningElement] '.')? name = ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{' body+=Statement* '}'
;

Parameter:
	type=[LocalType] name=ID
;

Method:
	type=[LocalType] name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' '{' body+=Statement* '}'
;

Expr:
	BinaryExpr | Value | FunctionCall | QualifiedName | LocalVariable
;

LocalVariable: name=ID;

QualifiedName:
	qualifier = [ScopeDefiningElement] '.' name = ID
;

BinaryExpr:
  	'(' lhs = Expr op=BinaryOperator rhs = Expr ')'
;

BinaryOperator:
  	'==' | '&&'
;

FunctionCall:
	name=ID '(' (arguments+=Expr (',' arguments+=Expr)*)? ')'
;


Statement:
	Conditional | Operation | SelfOperation | Assignment
;


Conditional:
	'if' '(' condition=Expr ')' '{' thenBranch+=Statement* '}'
	('else' '{' elseBranch+=Statement* '}')?
;

Operation:
	qualifier=[ScopeDefiningElement] '.' name=ID '(' (arguments+=Expr (',' arguments+=Expr)*)? ')' ';'
;

SelfOperation:
	'self' '.' name=ID '(' (arguments+=Expr (',' arguments+=Expr)*)? ')' ';'
;
Assignment:
	name=ID '=' exp=Expr ';'
;


Value:
	value = INT | '@' extern = [ExternalName | ID]
;

Update:
	'update' ('(' name=ID ':' sourceQualifier=[ScopeDefiningElement] '.' sourceName=ID ')')? '{' body+=Statement* '}'	
;

ConstantDefinition:
	(abstract?='abstract')? 'constant' type=[LocalType] name=ID ';'
;	

ConstantAssignment:
	lhs=ID '=' rhs=Expr ';'
;
