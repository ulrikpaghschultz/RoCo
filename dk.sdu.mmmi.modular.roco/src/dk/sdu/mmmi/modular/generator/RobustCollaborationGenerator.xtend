/*
 * generated by Xtext
 */
package dk.sdu.mmmi.modular.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import static extension org.eclipse.xtext.xbase.lib.IteratorExtensions.*
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject

import dk.sdu.mmmi.modular.robustCollaboration.Ensemble
import dk.sdu.mmmi.modular.robustCollaboration.Role
import org.eclipse.emf.ecore.EObject

class RobustCollaborationGenerator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider nameProvider 
	
	Resource resource
	IFileSystemAccess fsa
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		generateForType(typeof(Ensemble),[Ensemble x|x.compileEnsemble])
		generateForType(typeof(Role),[Role x|x.compileRole])
	}

	def <T extends EObject> void generateForType(Class<T> type, (T)=>CharSequence contents) {
		for(e: resource.getAllContents().toIterable().filter(type)) {
			fsa.generateFile(e.getFullyQualifiedName.toString.replace(".", "/") + ".java",contents.apply(e))
		}
	}
	
	def compileRole(Role role) '''
	'''

	def compileEnsemble(Ensemble ensemble) '''
	'''
}
